1. mvc(服务端渲染)
    后台的一种设计模式;后台负责渲染界面;将渲染成功后的界面交给浏览器;
    前端只需要画界面,写动态效果.  将写完的页面以.html结尾 发给 后台;后台拿到后将.html
    换成.jsp  将数据库中的数据渲染到jsp上  将成功渲染的jsp交给前端

2.mvvm(前后端分离)
    前端的一种设计模式;后台只负责吐数据;前端拿到后台吐出来的数据;将这个数据放到一个
    仓库中;再过框架(vue)将仓库中的数据优雅高性能的渲染到html上

问题问题?
    1. mvc 与 mvvm 哪个性能高
        mvc(服务端渲染 后台管理项目 企业级项目 toB B:企业)
            可以让前端省下塞数据的过程;理论上来讲;mvc性能高
            但是在高并发(同时有10000000人访问这个站点)的情况下:mvc的性能是极低的;
            低在用户拿到界面的过程会变得很慢;可是拿到之后渲染还是很快的;因为省下了
            塞数据的过程

        mvvm(前后端分离 toC的项目 面向客户端 淘宝 京东) 哪个性能高?
            在高并发的情况下;mvvm的性能是极高的.因为这个时候我们去后台拿的是数据(json 体积比页面小太多了)
            高在拿数据的这个过程是极快的,界面的渲染是相对慢一点

    2. 那为什么现在那么的提倡使用mvvm?
        因为mvvm有一个致命的优点:
            可以让后台程序员从前端的技术中脱离处理;让他们一心想着怎么快速的吐数据
            可以让前端程序员从后台技术的苦海中脱离出力;让他们一心想着怎么优雅的渲染界面
            可以提高整个项目的开发速度!!!!!!



带着灵魂编程;不是为了编程去编程!!!

现代化前端需要掌握的最核心的技能: 怎么将数据优雅的渲染到界面上